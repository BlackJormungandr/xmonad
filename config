(in-package :stumpwm)

(run-shell-command "setxkbmap it")
(run-shell-command "nitrogen --restore")
(run-shell-command "xsetroot -cursor_name left_ptr")

(setf *message-window-gravity* :center
	  *input-window-gravity*   :center
	  *window-border-style*    :thin
	  *message-window-padding* 10
	  *maxsize-border-width*    2
	  *normal-border-width*     2
	  *transient-border-width*  2
	  stumpwm::*float-window-border*        4
	  stumpwm::*float-window-title-height* 20
	  *mouse-focus-policy*     :click)

;; messages display time
(setf *timeout-wait* 7)

;;; Changing the prefix key to the super key
;; Clear the super key
(run-shell-command "xmodmap -e 'clear mod4'" t)
;; Bind the super key to F20
(run-shell-command "xmodmap -e \'keycode 133 = F20\'" t)
;; Set the prefix key to F20
(set-prefix-key (kbd "F20"))

(defvar *dawn/workspaces* (list "web" "code" "term" "discord" "media" "market" "misc"))
(stumpwm:grename (nth 0 *dawn/workspaces*))
(dolist (workspace (cdr *dawn/workspaces*))
	(stumpwm:gnewbg workspace))

(defvar *move-to-keybinds* (list "!"  "\"" "sterling" "$" "%" "&" "/" "(" ")" "="))
(dotimes (y (length *dawn/workspaces*))
	(let ((workspace (write-to-string (+ y 1))))
	(define-key *root-map* (kbd workspace) (concat "gselect " workspace))
	(define-key *root-map* (kbd (nth y *move-to-keybinds*)) (concat "gmove-and-follow " workspace))))

(defcommand better-quit () ()
  (let ((output (string-downcase (completing-read
		"Command: "
        	(list "restart" "shutdown" "lock" "log out" "suspend" "sleep" "hibernate")))))
    			(if (string/= output "")
       		 	(cond ((string= output "restart")
               		(run-shell-command "reboot"))
            	((string= output "shutdown")
            		(run-shell-command "shutdown -h now"))
              	((string= output "lock")
            		(run-shell-command "XSECURELOCK_FONT='Terminus' XSECURELOCK_AUTH_BACKGROUND_COLOR='#18181B' XSECURELOCK_AUTH_FOREGROUND_COLOR='#E4E4E8' xsecurelock"))
              	((string= output "log out")
            		(eval-command "quit"))
              	((or (string= output "suspend") (string= output "sleep"))
            		(run-shell-command "systemctl suspend"))
              	((string= output "hibernate")
            		(run-shell-command "systemctl hibernate"))
              	(t (echo "Please enter restart, shutdown, log out, suspend or hibernate."))))))

;; Basic Keys
(define-key *root-map* (kbd "R") "restart-soft")
(define-key *root-map* (kbd "X") "quit")
(define-key *root-map* (kbd "ESC") "send-escape")

(define-key *root-map* (kbd "q") "delete")
(define-key *root-map* (kbd "r") "remove")

(define-key *root-map* (kbd "C-r") "iresize")

(define-key *root-map* (kbd "s") "vsplit")
(define-key *root-map* (kbd "v") "hsplit")
(define-key *root-map* (kbd "B") "balance-frames")
(define-key *root-map* (kbd "z") "curframe")

;; Movement Keys if I don't want arrows.
;; (define-key *root-map* (kbd "j") "move-focus down")
;; (define-key *root-map* (kbd "k") "move-focus up")
;; (define-key *root-map* (kbd "h") "move-focus left")
;; (define-key *root-map* (kbd "l") "move-focus right")
;; (define-key *root-map* (kbd "H") "move-window left")
;; (define-key *root-map* (kbd "J") "move-window down")
;; (define-key *root-map* (kbd "K") "move-window up")
;; (define-key *root-map* (kbd "L") "move-window right")

(setf *resize-increment* 50)
(define-key *top-map* (kbd "M-l") "resize-direction Right")
(define-key *top-map* (kbd "M-h") "resize-direction Left")
(define-key *top-map* (kbd "M-k") "resize-direction Up")
(define-key *top-map* (kbd "M-j") "resize-direction Down")

(define-key *root-map* (kbd "d") "exec rofi -show run")
(define-key *root-map* (kbd "RET") "exec xterm")

(define-key *root-map* (kbd "t") "exec thunar")


(defun key-press-hook (key key-seq cmd)
  (declare (ignore key))
  (unless (eq *top-map* *resize-map*)
    (let ((*message-window-gravity* :bottom-right))
      (message "Keys: ~a" (print-key-seq (reverse key-seq))))
    (when (stringp cmd)
      ;; give 'em time to read it
      (sleep 0.01))))

(defmacro replace-hook (hook fn)
  `(remove-hook ,hook ,fn)
  `(add-hook ,hook ,fn))

(replace-hook *key-press-hook* 'key-press-hook)